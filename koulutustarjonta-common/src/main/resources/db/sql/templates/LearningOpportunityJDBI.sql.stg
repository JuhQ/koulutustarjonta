group LearningOpportunityJDBI;

upsert(learningOpportunity) ::= <<

  MERGE INTO koulutus USING dual ON ( id=:id )
    WHEN MATCHED THEN UPDATE SET
    tutkintonimike_fi = :tutkintonimike_fi, tutkintonimike_sv = :tutkintonimike_sv, tutkintonimike_en = :tutkintonimike_en,
    opintoala_fi = :opintoala_fi, opintoala_sv = :opintoala_sv, opintoala_en = :opintoala_en,
    tutkintoohjelma_fi = :tutkintoohjelma_fi, tutkintoohjelma_sv = :tutkintoohjelma_sv, tutkintoohjelma_en = :tutkintoohjelma_en,
    alkamisvuosi = :alkamisvuosi, alkamiskausi_fi = :alkamiskausi_fi, alkamiskausi_sv = :alkamiskausi_sv, alkamiskausi_en = :alkamiskausi_en,
    suunni_kesto = :suunni_kesto, suunni_tyyppi_fi = :suunni_tyyppi_fi, suunni_tyyppi_sv = :suunni_tyyppi_sv, suunni_tyyppi_en = :suunni_tyyppi_en,
    laajuus = :laajuus, laajuus_tyyppi_fi = :laajuus_tyyppi_fi, laajuus_tyyppi_sv = :laajuus_tyyppi_sv, laajuus_tyyppi_en = :laajuus_tyyppi_en,
    rakenne_fi = :rakenne_fi,  rakenne_sv = :rakenne_sv, rakenne_en = :rakenne_en,
    tavoitteet_fi = :tavoitteet_fi, tavoitteet_sv = :tavoitteet_sv, tavoitteet_en = :tavoitteet_en,
    mahdollisuudet_fi = :mahdollisuudet_fi, mahdollisuudet_sv = :mahdollisuudet_sv, mahdollisuudet_en = :mahdollisuudet_en,
    patevyys_fi = :patevyys_fi, patevyys_sv = :patevyys_sv, patevyys_en = :patevyys_en,
    lisat_opkiel_fi = :lisat_opkiel_fi, lisat_opkiel_sv = :lisat_opkiel_sv, lisat_opkiel_en = :lisat_opkiel_en,
    yhteistyo_fi = :yhteistyo_fi, yhteistyo_sv = :yhteistyo_sv, yhteistyo_en = :yhteistyo_en,
    paaaineval_fi = :paaaineval_fi, paaaineval_sv = :paaaineval_sv, paaaineval_en = :paaaineval_en,
    kansval_fi = :kansval_fi, kansval_sv = :kansval_sv, kansval_en = :kansval_en,
    sijtyo_fi = :sijtyo_fi, sijtyo_sv = :sijtyo_sv, sijtyo_en = :sijtyo_en,
    sisalto_fi = :sisalto_fi, sisalto_sv = :sisalto_sv, sisalto_en = :sisalto_en,
    tutkpaino_fi = :tutkpaino_fi, tutkpaino_sv = :tutkpaino_sv, tutkpaino_en = :tutkpaino_en,
    opinnaytetyo_fi = :opinnaytetyo_fi, opinnaytetyo_sv = :opinnaytetyo_sv, opinnaytetyo_en = :opinnaytetyo_en,
    koulutusaste_fi = :koulutusaste_fi, koulutusaste_sv = :koulutusaste_sv, koulutusaste_en = :koulutusaste_en, hinta = :hinta
    WHEN NOT MATCHED THEN INSERT
    (id,  tutkintonimike_fi, tutkintonimike_sv, tutkintonimike_en, opintoala_fi, opintoala_sv, opintoala_en,
    tutkintoohjelma_fi, tutkintoohjelma_sv, tutkintoohjelma_en, alkamisvuosi, alkamiskausi_fi, alkamiskausi_sv, alkamiskausi_en,
    suunni_kesto, suunni_tyyppi_fi, suunni_tyyppi_sv, suunni_tyyppi_en, laajuus, laajuus_tyyppi_fi, laajuus_tyyppi_sv, laajuus_tyyppi_en,
    rakenne_fi, rakenne_sv, rakenne_en, tavoitteet_fi, tavoitteet_sv, tavoitteet_en,
    mahdollisuudet_fi, mahdollisuudet_sv, mahdollisuudet_en, patevyys_fi, patevyys_sv, patevyys_en,
    lisat_opkiel_fi, lisat_opkiel_sv, lisat_opkiel_en, yhteistyo_fi, yhteistyo_sv, yhteistyo_en,
    paaaineval_fi, paaaineval_sv, paaaineval_en, kansval_fi, kansval_sv, kansval_en,
    sijtyo_fi, sijtyo_sv, sijtyo_en, sisalto_fi, sisalto_sv, sisalto_en,
    tutkpaino_fi, tutkpaino_sv, tutkpaino_en, opinnaytetyo_fi, opinnaytetyo_sv, opinnaytetyo_en,
    koulutusaste_fi, koulutusaste_sv, koulutusaste_en, hinta)
    VALUES (:id,  :tutkintonimike_fi, :tutkintonimike_sv, :tutkintonimike_en,
    :opintoala_fi, :opintoala_sv, :opintoala_en, :tutkintoohjelma_fi, :tutkintoohjelma_sv, :tutkintoohjelma_en,
    :alkamisvuosi, :alkamiskausi_fi, :alkamiskausi_sv, :alkamiskausi_en, :suunni_kesto, :suunni_tyyppi_fi, :suunni_tyyppi_sv, :suunni_tyyppi_en,
    :laajuus, :laajuus_tyyppi_fi, :laajuus_tyyppi_sv, :laajuus_tyyppi_en, :rakenne_fi, :rakenne_sv, :rakenne_en,
    :tavoitteet_fi, :tavoitteet_sv, :tavoitteet_en, :mahdollisuudet_fi, :mahdollisuudet_sv, :mahdollisuudet_en,
    :patevyys_fi, :patevyys_sv, :patevyys_en, :lisat_opkiel_fi, :lisat_opkiel_sv, :lisat_opkiel_en,
    :yhteistyo_fi, :yhteistyo_sv, :yhteistyo_en, :paaaineval_fi, :paaaineval_sv, :paaaineval_en,
    :kansval_fi, :kansval_sv, :kansval_en, :sijtyo_fi, :sijtyo_sv, :sijtyo_en,
    :sisalto_fi, :sisalto_sv, :sisalto_en, :tutkpaino_fi, :tutkpaino_sv, :tutkpaino_en,
    :opinnaytetyo_fi, :opinnaytetyo_sv, :opinnaytetyo_en,
    :koulutusaste_fi, :koulutusaste_sv, :koulutusaste_en, :hinta)

>>

delete(learningOpportunityOid) ::= <<
    DELETE FROM koulutus_tarjoajat
    WHERE id_koulutus = :id_koulutus
    ;

    DELETE FROM aiheet
    WHERE id_koulutus = :id_koulutus
    ;

    DELETE FROM hakukohde_koulutus
    WHERE id_koulutus = :id_koulutus
    ;

    DELETE FROM koulutus_sisaltyvyys
    WHERE id_vanhempi = :id_koulutus
    OR id_lapsi = :id_koulutus
    ;

    DELETE FROM koulutus_yhteystieto
    WHERE id = :id_koulutus
    ;

    DELETE FROM koulutus_opetuskieli
    WHERE id_koulutus = :id_koulutus
    ;

    DELETE FROM koulutus
    WHERE ID = :id_koulutus

>>

findAllJoinRows() ::= <<

SELECT
    k.*,
    ok.kieli as kieli,
    hk.id_hakukohde AS hakukohde_id,
    kt.id_tarjoaja AS tarjoaja_id,
    l.id_lapsi AS id_lapsi,
    v.id_vanhempi AS id_vanhempi,
    a.aihe as aihe
  FROM koulutus k
  LEFT JOIN
    (SELECT
      ko.id_koulutus,
      listagg(ok.kieli || '#' || ok.selite_fi || '#' || ok.selite_sv || '#' || ok.selite_en, '|') within group (order by id_koulutus) as kieli
    FROM
      opetuskieli ok
     INNER JOIN
      koulutus_opetuskieli ko ON ok.id = ko.id_opetuskieli
    GROUP BY id_koulutus
    ) ok on k.id = id_koulutus
  LEFT JOIN
    (SELECT
      hk.id_koulutus,
      listagg(hk.id_hakukohde, '|') within group (order by id_koulutus) as id_hakukohde
     FROM hakukohde_koulutus hk
     GROUP BY id_koulutus
    ) hk ON k.id = hk.id_koulutus
  LEFT JOIN
    (SELECT
      kt.id_koulutus,
      listagg(kt.id_tarjoaja, '|') within group (order by id_koulutus) as id_tarjoaja
     FROM koulutus_tarjoajat kt
     GROUP BY id_koulutus
    ) kt ON k.id = kt.id_koulutus
  LEFT JOIN
    (SELECT
      v.id_vanhempi,
      listagg(v.id_lapsi, '|') within group (order by id_lapsi) as id_lapsi
      FROM koulutus_sisaltyvyys v
      GROUP by v.id_vanhempi
    ) l ON k.id = l.id_vanhempi
  LEFT JOIN
    (SELECT
      v.id_lapsi,
      listagg(v.id_vanhempi, '|') within group (order by id_vanhempi) as id_vanhempi
     FROM koulutus_sisaltyvyys v
     GROUP by v.id_lapsi
     ) v ON k.id = v.id_lapsi
  LEFT JOIN
    (SELECT
       a.id_koulutus,
       listagg(a.nimi_fi || '#' || a.nimi_sv || '#' || a.nimi_en, '|') within group (order by id_koulutus) as aihe
     FROM aiheet a
     GROUP BY a.id_koulutus
    ) a ON k.id = a.id_koulutus

>>

findJoinRowsById(id) ::= <<

  SELECT
    k.*,
    ok.kieli as kieli,
    hk.id_hakukohde AS hakukohde_id,
    kt.id_tarjoaja AS tarjoaja_id,
    l.id_lapsi AS id_lapsi,
    v.id_vanhempi AS id_vanhempi,
    a.aihe as aihe
  FROM koulutus k
  LEFT JOIN
    (SELECT
      ko.id_koulutus,
      listagg(ok.kieli || '#' || ok.selite_fi || '#' || ok.selite_sv || '#' || ok.selite_en, '|') within group (order by id_koulutus) as kieli
    FROM
      opetuskieli ok
     INNER JOIN
      koulutus_opetuskieli ko ON ok.id = ko.id_opetuskieli
    GROUP BY id_koulutus
    ) ok on k.id = id_koulutus
  LEFT JOIN
    (SELECT
      hk.id_koulutus,
      listagg(hk.id_hakukohde, '|') within group (order by id_koulutus) as id_hakukohde
     FROM hakukohde_koulutus hk
     GROUP BY id_koulutus
    ) hk ON k.id = hk.id_koulutus
 LEFT JOIN
    (SELECT
      kt.id_koulutus,
      listagg(kt.id_tarjoaja, '|') within group (order by id_koulutus) as id_tarjoaja
     FROM koulutus_tarjoajat kt
     GROUP BY id_koulutus
    ) kt ON k.id = kt.id_koulutus
  LEFT JOIN
    (SELECT
      v.id_vanhempi,
      listagg(v.id_lapsi, '|') within group (order by id_lapsi) as id_lapsi
      FROM koulutus_sisaltyvyys v
      GROUP by v.id_vanhempi
    ) l ON k.id = l.id_vanhempi
  LEFT JOIN
    (SELECT
      v.id_lapsi,
      listagg(v.id_vanhempi, '|') within group (order by id_vanhempi) as id_vanhempi
     FROM koulutus_sisaltyvyys v
     GROUP by v.id_lapsi
     ) v ON k.id = v.id_lapsi
  LEFT JOIN
    (SELECT
       a.id_koulutus,
       listagg(a.nimi_fi || '#' || a.nimi_sv || '#' || a.nimi_en, '|') within group (order by id_koulutus) as aihe
     FROM aiheet a
     GROUP BY a.id_koulutus
    ) a ON k.id = a.id_koulutus
  WHERE k.id = :id

>>

insertTeachingLanguages(teachingLanguages) ::= <<

  MERGE INTO opetuskieli USING dual on ( id = :id )
    WHEN NOT MATCHED THEN INSERT (id, kieli, selite_fi, selite_sv, selite_en)
    VALUES (:id, :kieli, :selite_fi, :selite_sv, :selite_en)

>>


addTeachingLanguagesToLearningOpportunity(learningOpportunityOid, teachingLanguages) ::= <<

  INSERT INTO koulutus_opetuskieli (id_koulutus, id_opetuskieli)
    VALUES (:id_koulutus, :id_opetuskieli)

>>

removeTeachingLanguagesFromLearningOpportunity(learningOpportunityOid) ::= <<

  DELETE FROM koulutus_opetuskieli
    WHERE id_koulutus = :id

>>

addKeywordToLearningOpportunity(learningOpportunityOid, kw_fi, kw_sv, kw_en) ::= <<

  INSERT INTO aiheet (id_koulutus, nimi_fi, nimi_sv, nimi_en)
    VALUES (:id_koulutus, :keyword_fi, :keyword_sv, :keyword_en)

>>

removeKeywordsFromLearningOpportunity(learningOpportunityOid) ::= <<

  DELETE FROM aiheet
    WHERE id_koulutus = :id

>>

addApplicationOptions(learningOpportunityOid, applicationOptionOids) ::= <<

  MERGE INTO hakukohde_koulutus USING dual ON (id_koulutus = :id_koulutus AND id_hakukohde = :id_hakukohde)
    WHEN NOT MATCHED THEN INSERT (id_koulutus, id_hakukohde)
    VALUES (:id_koulutus, :id_hakukohde)

>>


removeDeletedApplicationOptions(learningOpportunityOid, current) ::= <<

  DELETE FROM hakukohde_koulutus
    WHERE id_koulutus = :id_koulutus
    AND id_hakukohde NOT IN (<current>)

>>


addParents(childOid, parentOids) ::= <<

  MERGE INTO koulutus_sisaltyvyys
    USING dual
    ON (id_lapsi = :id_lapsi AND id_vanhempi = :id_vanhempi)
    WHEN NOT MATCHED THEN
    INSERT (id_lapsi, id_vanhempi) VALUES (:id_lapsi, :id_vanhempi)
    WHERE EXISTS (
    SELECT 1
    FROM koulutus k
    WHERE k.id = :id_vanhempi)

>>


addChildren(parentOid, childOids) ::= <<

  MERGE INTO koulutus_sisaltyvyys
    USING dual
    ON (id_lapsi = :id_lapsi AND id_vanhempi = :id_vanhempi)
    WHEN NOT MATCHED THEN
    INSERT (id_lapsi, id_vanhempi) VALUES (:id_lapsi, :id_vanhempi)
    WHERE EXISTS (
    SELECT 1
    FROM koulutus k
    WHERE k.id = :id_lapsi)

>>

addProviders(learningOpportunityOid, providerOid) ::= <<

    MERGE INTO koulutus_tarjoajat
    USING dual
    ON (id_koulutus = :id_koulutus AND id_tarjoaja = :id_tarjoaja)
    WHEN NOT MATCHED THEN
    INSERT (id_koulutus, id_tarjoaja) VALUES (:id_koulutus, :id_tarjoaja)

>>

removeProviders(learningOpportunityOid) ::= <<

    DELETE FROM koulutus_tarjoajat
    WHERE id_koulutus = :id_koulutus
>>


