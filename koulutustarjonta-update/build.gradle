import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

apply plugin: 'application'
apply plugin: 'rpm'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'fi.helsinki.koulutustarjonta.KotaUpdateApplication'

jar {
    manifest {
        attributes("Implementation-Title": "Koulutustarjonta - Update", "Implementation-Version": version,
                "Main-Class": mainClassName)
    }
}

shadowJar {
    transform(ServiceFileTransformer)
    classifier = ''
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.9.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.0'
    }
}

dependencies {
    compile 'io.dropwizard:dropwizard-core:0.7.0'
    compile 'io.dropwizard:dropwizard-client:0.7.0'
    compile 'io.dropwizard:dropwizard-jdbi:0.7.0'
    compile 'com.xeiam:sundial:1.1.3'
    compile files('../lib/ojdbc7.jar')
    compile project(':koulutustarjonta-common')
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'io.dropwizard:dropwizard-testing:0.7.0'
}

run {
    args 'server', 'update-config.yml'
}

task rpm(type: Rpm, dependsOn: 'shadowJar') {
    packageName = 'koulutustarjonta-update'
    release = commitHash()
    arch = NOARCH
    os = LINUX
    summary = "Koulutustarjonta Update"
    description ''
    user = "koultarj"

    preInstall = file('src/deploy/rpm/pre_install')
    postInstall = file('src/deploy/rpm/post_install')
    preUninstall = file('src/deploy/rpm/pre_uninstall')

    into '/opt/koulutustarjonta-update'

    //application executable
    from("build/libs") {
        include "koulutustarjonta-update-" + version + ".jar"
        //remove version from file to avoid having to redo config files on every release
        rename { String fileName ->
            fileName.replace("-$version", '')
        }
    }

    //configuration file
    from('src/deploy/config') {
        fileType = CONFIG
        into '/'
        // insert db configuration parameters
        expand(db_url: project.hasProperty('db.url') ? project.getProperty('db.url') : "",
                db_user: project.hasProperty('db.user') ? project.getProperty('db.user') : "",
                db_passwd: project.hasProperty('db.passwd') ? project.getProperty('db.passwd') : "")
    }

    // Upstart file for RHEL
    from('src/deploy/upstart') {
        fileType = CONFIG
        into '/'
    }
}
