import java.text.SimpleDateFormat

apply plugin: 'application'
apply plugin: 'rpm'

mainClassName = 'fi.helsinki.koulutustarjonta.KotaQueryApplication'

jar {
    manifest {
        attributes("Implementation-Title": "Koulutustarjonta - Query", "Implementation-Version": version,
                "Main-Class": mainClassName)
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.9.1'
    }
}

ext {
    release = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'io.dropwizard:dropwizard-core:0.7.0'
    compile 'org.modelmapper:modelmapper:0.7.1'
    compile project(':koulutustarjonta-common')
    compile files('../lib/ojdbc6_4.jar')
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'io.dropwizard:dropwizard-testing:0.7.0'
    testCompile 'org.easytesting:fest-assert:1.4'
}

run {
    args 'server', 'query-config.yml'
}


def commitHash() {
    def env = System.getenv()
    def hash = env['GIT_COMMIT']
    println("Jenkins git commit hash environment variable: " + hash)
    if (hash == null) {
        println("git commit jenkins variable not found, resolving commit from git")
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        hash = proc.text.trim()
    }
    else {
        println("Jenkins git commit hash: " + hash)
        println("slicing to short form")
        hash = hash[0..6]
        println("short form: " + hash)
    }
    hash
}

task rpm(type: Rpm, dependsOn: 'jar') {
    println("BUallILD : " + commitHash())
    packageName = 'koulutustarjonta-query'
    release = commitHash()
    arch = NOARCH
    os = LINUX
    summary = "Koulutustarjonta Query"
    description ''
    user = "koultarj"

    preInstall= file('src/deploy/rpm/pre_install')
    postInstall = file('src/deploy/rpm/post_install')
    preUninstall = file('src/deploy/rpm/pre_uninstall')

    into '/opt/koulutustarjonta-query'

    //application executable
    from("build/libs") {
        include "koulutustarjonta-query-" + version + ".jar"
        //remove version from file to avoid having to redo config files on every release
        rename { String fileName ->
            fileName.replace("-$version", '')
        }
    }

    //configuration file
    from('src/deploy/config') {
        fileType = CONFIG
        into '/'
        // insert db configuration parameters
        expand(db_url: project.getProperty('db_url'),
                db_user: project.getProperty('db_user'),
                db_passwd: project.getProperty('db_passwd'))
    }

    // Upstart file for RHEL
    from('src/deploy/upstart') {
        fileType = CONFIG
        into '/'
    }
}
